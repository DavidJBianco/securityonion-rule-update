Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 securityonion-rule-update (20120726-0ubuntu0securityonion24) precise; urgency=low
 .
   * Issue 681: rule-update: wipe snort_dynamicrules directory on sensor
   * Issue 677: rule-update: create /usr/local/lib/snort_dynamicrules/ if it doesn't already exist
   * Issue 678: rule-update: /etc/cron.d/rule-update should have 2>&1
   * Issue 697: rule-update: log snorby reference table update to barnyard2-snorby.log
Author: Doug Burks <doug.burks@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- securityonion-rule-update-20120726.orig/etc/cron.d/rule-update
+++ securityonion-rule-update-20120726/etc/cron.d/rule-update
@@ -5,5 +5,4 @@
 SHELL=/bin/sh
 PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
 
-01 7    * * *   root    date >> /var/log/nsm/pulledpork.log ; /usr/bin/rule-update >> /var/log/nsm/pulledpork.log
-
+01 7    * * *   root    date >> /var/log/nsm/pulledpork.log ; /usr/bin/rule-update >> /var/log/nsm/pulledpork.log 2>&1
--- securityonion-rule-update-20120726.orig/usr/bin/rule-update
+++ securityonion-rule-update-20120726/usr/bin/rule-update
@@ -1,6 +1,6 @@
 #!/bin/bash
 #
-# Copyright (C) 2008-2014 Doug Burks and Security Onion <doug.burks@gmail.com>
+# Copyright (C) 2008-2015 Doug Burks and Security Onion <doug.burks@gmail.com>
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -42,6 +42,12 @@ LOCAL_NIDS_RULE_TUNING=false
 # Setting to true bypasses this so that you can tune local_rules.xml locally
 LOCAL_HIDS_RULE_TUNING=false
 
+# What user account should be used to execute pulledpork?
+PULLEDPORK_USER=sguil
+
+# What group should be given permissions to the pulledpork output?
+PULLEDPORK_GROUP=sguil
+
 # The values above can be overridden in securityonion.conf
 source /etc/nsm/securityonion.conf
 
@@ -89,6 +95,21 @@ cp $NIDS_RULES_LOCAL $NIDS_RULES_BACK/lo
 echo "Cleaning up local.rules backup files older than $DAYSTOKEEP_RULE_BACKUPS days."
 find $NIDS_RULES_BACK/local.rules.* -type f -mtime +$DAYSTOKEEP_RULE_BACKUPS -exec /bin/rm -f '{}' +
 
+# Create snort_dynamicrules and snort_dynamicrules_backup directories if they don't already exist
+mkdir -p /usr/local/lib/snort_dynamicrules/
+mkdir -p /usr/local/lib/snort_dynamicrules_backup/
+
+# Set permissions to allow PULLEDPORK_USER to write rules
+#chown -R $PULLEDPORK_USER:$PULLEDPORK_GROUP /etc/nsm/rules
+#chown -R $PULLEDPORK_USER:$PULLEDPORK_GROUP /usr/local/lib/snort_dynamicrules/
+#mkdir -p /var/log/nsm/
+#touch /var/log/nsm/sid_changes.log
+#chown $PULLEDPORK_USER:$PULLEDPORK_GROUP /var/log/nsm/sid_changes.log
+
+# Create home dir for $PULLEDPORK_USER and set permissions
+#mkdir -p /home/$PULLEDPORK_USER
+#chown -R $PULLEDPORK_USER /home/$PULLEDPORK_USER
+
 #########################################
 # Is this box a master or slave?
 #########################################
@@ -103,7 +124,7 @@ if [ ! -f $SSH_CONF ]; then
 	cp /var/ossec/rules/local_rules.xml /tmp/local_rules.xml
 	chmod 644 /tmp/local_rules.xml
 
-	# If running Snort, update local_rules in pulledpork.conf and wipe snort_dynamicrules
+	# If running Snort, update local_rules in pulledpork.conf and remove old .so files
 	if [ "$ENGINE" = "snort" ]; then
 		# Check for local Suricata rules that need to be removed
 		if grep "^local_rules=/etc/nsm/rules/local.rules,/etc/nsm/rules/decoder-events.rules,/etc/nsm/rules/stream-events.rules,/etc/nsm/rules/http-events.rules,/etc/nsm/rules/smtp-events.rules$" /etc/nsm/pulledpork/pulledpork.conf >/dev/null 2>&1; then
@@ -113,14 +134,10 @@ if [ ! -f $SSH_CONF ]; then
 			sed -i 's|^local_rules=/etc/nsm/rules/local.rules,/etc/nsm/rules/decoder-events.rules,/etc/nsm/rules/stream-events.rules,/etc/nsm/rules/http-events.rules,/etc/nsm/rules/smtp-events.rules$|local_rules=/etc/nsm/rules/local.rules|g' /etc/nsm/pulledpork/pulledpork.conf
 		fi
 
-		# Check for .so files in snort_dynamicrules directory
+		# Check for .so files in snort_dynamicrules directory and move them to backup directory
 		if ls /usr/local/lib/snort_dynamicrules/*.so >/dev/null 2>&1; then
-			# Create a backup directory
-			mkdir -p /usr/local/lib/snort_dynamicrules_backup 
-			# Move the old .so files to the backup directory
 			mv /usr/local/lib/snort_dynamicrules/*.so /usr/local/lib/snort_dynamicrules_backup/ 
 		fi
-
 	fi
 
 	# Default to no PulledPork options
@@ -146,6 +163,7 @@ if [ ! -f $SSH_CONF ]; then
 
 	# Go get rules from Internet.
 	echo "Running PulledPork."
+
 	/usr/bin/pulledpork.pl -P $PP_OPTIONS -c /etc/nsm/pulledpork/pulledpork.conf |
 		grep -v "normalizations disabled because not inline" |grep -v "^$"
 	
@@ -172,13 +190,14 @@ output database: alert, mysql, user=root
 EOF
                 echo
                 if [ ! -f /etc/nsm/barnyard2-snorby/2.1.13-Build-333 ]; then
-                        echo "Deleting Snorby's sig_reference table"
+                        echo -n "Deleting Snorby's sig_reference table..."
                         mysql -uroot -Dsnorby -e "delete from sig_reference;"
                         touch /etc/nsm/barnyard2-snorby/2.1.13-Build-333
+			echo "done."
                 fi
-                echo "Updating Snorby's sig_reference table"
-		echo
-		/usr/bin/barnyard2 -c /etc/nsm/barnyard2-snorby/barnyard2.conf
+                echo -n "Updating Snorby's sig_reference table..."
+		/usr/bin/barnyard2 -c /etc/nsm/barnyard2-snorby/barnyard2.conf > /var/log/nsm/barnyard2-snorby.log 2>&1
+		echo "done."
 	fi
 else
 	# This box is a sensor.  Go get rules from master.
@@ -271,11 +290,19 @@ else
 		echo "Copying rules from $SERVERNAME."
 		scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:$NIDS/downloaded.rules 	$NIDS/downloaded.rules
 		scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:$NIDS/local.rules 	$NIDS/local.rules
-		scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:$NIDS/so_rules.rules 	$NIDS/so_rules.rules
 		scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:$NIDS/sid-msg.map 	$NIDS/sid-msg.map
 		scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:$NIDS/threshold.conf 	$NIDS/threshold.conf
 		scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:$NIDS/bpf.conf 		$NIDS/bpf.conf
-		scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/usr/local/lib/snort_dynamicrules/* /usr/local/lib/snort_dynamicrules/
+		if [ "$ENGINE" = "snort" ]; then
+			scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:$NIDS/so_rules.rules 	$NIDS/so_rules.rules
+
+			# Check for .so files in snort_dynamicrules directory and move them to backup directory
+			if ls /usr/local/lib/snort_dynamicrules/*.so >/dev/null 2>&1; then
+				mv /usr/local/lib/snort_dynamicrules/*.so /usr/local/lib/snort_dynamicrules_backup/ 
+			fi
+
+			scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/usr/local/lib/snort_dynamicrules/* /usr/local/lib/snort_dynamicrules/
+		fi
 	fi
 fi
 
